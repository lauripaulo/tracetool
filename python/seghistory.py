'''
Gets info from CSV files with segment table info generated by
the TraceTool and produces data to be used to create a graphical
representation of the segment table history:
'''

import os
import sys
import csv
from collections import OrderedDict

def extract_history(basedir, results_file):
    '''
    iterates over all CSV of the base dir and reads the memtable CSV history.
    '''
    for root, dirs, files in os.walk(basedir):
        print ('root: %s' % (root))
        #print ('files: %s' % (files))
        #print ('dirs: %s' % (dirs))
        csvdict = create_csvdict(files)
        data = process_csvdict(csvdict, root)
        if (len(data) > 0):
            with open(os.path.join(root, results_file), 'w') as working_file:
                fieldnames = ['instructions', 'total_segments', 'seg_with_any_refs',
                    'seg_with_code_refs', 'seg_with_data_refs', 'size_total', 
                    'size_only_refered']
                writer = csv.writer(working_file, delimiter=';', lineterminator='\n')
                writer.writerow(fieldnames)
                key_ordered_list = sorted(data.keys())
                for key in key_ordered_list:
                    writer.writerow([
                        key + 1,
                        data[key]['total_segments'],
                        data[key]['seg_with_any_refs'],
                        data[key]['seg_with_code_refs'],
                        data[key]['seg_with_data_refs'],
                        data[key]['size_total'],
                        data[key]['size_only_refered']
                    ])
            print ('Result file %s created!' % (working_file.name))

        
def process_csvdict(csvdict, root):
        '''
        orders the dict keys (instructions executed) and iterates
        in the CSV files in the order they were created.
        '''
        historic_data = OrderedDict()
        key_ordered_list = sorted(csvdict.keys())
        for key in key_ordered_list:
            result = analyse_history(os.path.join(root, csvdict[key]))
            historic_data[key] = result
        return historic_data
            


def analyse_history(csv_file):
    '''
    Creates a dict containing:
    csvfile = {
        totalSegments : <number>
        segmentWithMemRef : <number>
    }
    '''
    print ('Opening: ', csv_file)
    with open(csv_file, 'r') as working_file:
        reader = csv.DictReader(working_file)
        total_segments = 0
        seg_with_data_refs = 0
        seg_with_code_refs = 0
        seg_with_any_refs = 0
        size_total = 0
        size_only_refered = 0
        for row in reader:
            total_segments += 1
            size_total += int(row[' Size'])
            code_refs = int(row[' Instructions'])
            data_refs = int(row[' Mem. access'])
            if code_refs > 0:
                seg_with_code_refs += 1
            if data_refs > 0:
                seg_with_data_refs += 1
            if data_refs > 0 or code_refs > 0:
                seg_with_any_refs += 1
                size_only_refered += int(row[' Size'])
            results = {}
        results['total_segments'] = total_segments
        results['seg_with_data_refs'] = seg_with_data_refs
        results['seg_with_code_refs'] = seg_with_code_refs
        results['seg_with_any_refs'] = seg_with_any_refs
        results['size_total'] = size_total
        results['size_only_refered'] = size_only_refered
        return results


def create_csvdict(files):
    '''
    returns a dict of {instructionNumber : fileName} from
    a list of files filtering only CSV files.
    
    012345678901234567890123456789
    ||||||||||||||||||||||||||||||
    memtable.csv-104999999.csv
    '''
    csvfiles = {}
    for file in files:
        if file.endswith('.csv'):
            if file[0:8] == 'memtable':
                csvfiles[int(file[13:-4])] = file
    return csvfiles


if __name__ == "__main__":
    print('Segment History Extractor (pmap) v0.1')
    if len(sys.argv) < 3:
        print('Usage: python3 seghistory.py <memtable CSV dir> <results CSV file>\n')
    else:
        try:
            extract_history(sys.argv[1], sys.argv[2])
        except FileNotFoundError as error:
            print('File not found! Error: {}'.format(error))
        except PermissionError as error:
            print('Cannot create file {}. Error: {}'.format(sys.argv[2], error))
        except OSError as error:
            print('Unexpected OS error: {}'.format(error))
